//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IDuplexOperations", CallbackContract=typeof(Client.ServiceReference1.IDuplexOperationsCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IDuplexOperations {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexOperations/getLater")]
        void getLater(System.DateTime data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexOperations/getLater")]
        System.Threading.Tasks.Task getLaterAsync(System.DateTime data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexOperations/addRecord")]
        void addRecord(string nazwa);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexOperations/addRecord")]
        System.Threading.Tasks.Task addRecordAsync(string nazwa);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexOperations/getAll")]
        void getAll();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexOperations/getAll")]
        System.Threading.Tasks.Task getAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexOperations/inSet")]
        void inSet(string namePicture);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexOperations/inSet")]
        System.Threading.Tasks.Task inSetAsync(string namePicture);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuplexOperations/getPathFromId", ReplyAction="http://tempuri.org/IDuplexOperations/getPathFromIdResponse")]
        string getPathFromId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuplexOperations/getPathFromId", ReplyAction="http://tempuri.org/IDuplexOperations/getPathFromIdResponse")]
        System.Threading.Tasks.Task<string> getPathFromIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexOperations/getSize")]
        void getSize();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexOperations/getSize")]
        System.Threading.Tasks.Task getSizeAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexOperations/resaizeImage")]
        void resaizeImage(int id, int width, int height);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexOperations/resaizeImage")]
        System.Threading.Tasks.Task resaizeImageAsync(int id, int width, int height);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuplexOperations/getPath", ReplyAction="http://tempuri.org/IDuplexOperations/getPathResponse")]
        string getPath(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuplexOperations/getPath", ReplyAction="http://tempuri.org/IDuplexOperations/getPathResponse")]
        System.Threading.Tasks.Task<string> getPathAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexOperations/getName")]
        void getName(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexOperations/getName")]
        System.Threading.Tasks.Task getNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuplexOperations/getID", ReplyAction="http://tempuri.org/IDuplexOperations/getIDResponse")]
        int getID();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuplexOperations/getID", ReplyAction="http://tempuri.org/IDuplexOperations/getIDResponse")]
        System.Threading.Tasks.Task<int> getIDAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuplexOperations/setNazwa", ReplyAction="http://tempuri.org/IDuplexOperations/setNazwaResponse")]
        void setNazwa(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuplexOperations/setNazwa", ReplyAction="http://tempuri.org/IDuplexOperations/setNazwaResponse")]
        System.Threading.Tasks.Task setNazwaAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuplexOperations/getImageData", ReplyAction="http://tempuri.org/IDuplexOperations/getImageDataResponse")]
        Contract.ImageData getImageData(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuplexOperations/getImageData", ReplyAction="http://tempuri.org/IDuplexOperations/getImageDataResponse")]
        System.Threading.Tasks.Task<Contract.ImageData> getImageDataAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDuplexOperationsCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexOperations/Wynik")]
        void Wynik(string result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexOperations/Kolekcja")]
        void Kolekcja([System.ServiceModel.MessageParameterAttribute(Name="kolekcja")] System.Collections.Generic.List<Contract.ListItem> kolekcja1);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexOperations/Warunek")]
        void Warunek(bool value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDuplexOperationsChannel : Client.ServiceReference1.IDuplexOperations, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DuplexOperationsClient : System.ServiceModel.DuplexClientBase<Client.ServiceReference1.IDuplexOperations>, Client.ServiceReference1.IDuplexOperations {
        
        public DuplexOperationsClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public DuplexOperationsClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public DuplexOperationsClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DuplexOperationsClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DuplexOperationsClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void getLater(System.DateTime data) {
            base.Channel.getLater(data);
        }
        
        public System.Threading.Tasks.Task getLaterAsync(System.DateTime data) {
            return base.Channel.getLaterAsync(data);
        }
        
        public void addRecord(string nazwa) {
            base.Channel.addRecord(nazwa);
        }
        
        public System.Threading.Tasks.Task addRecordAsync(string nazwa) {
            return base.Channel.addRecordAsync(nazwa);
        }
        
        public void getAll() {
            base.Channel.getAll();
        }
        
        public System.Threading.Tasks.Task getAllAsync() {
            return base.Channel.getAllAsync();
        }
        
        public void inSet(string namePicture) {
            base.Channel.inSet(namePicture);
        }
        
        public System.Threading.Tasks.Task inSetAsync(string namePicture) {
            return base.Channel.inSetAsync(namePicture);
        }
        
        public string getPathFromId(int id) {
            return base.Channel.getPathFromId(id);
        }
        
        public System.Threading.Tasks.Task<string> getPathFromIdAsync(int id) {
            return base.Channel.getPathFromIdAsync(id);
        }
        
        public void getSize() {
            base.Channel.getSize();
        }
        
        public System.Threading.Tasks.Task getSizeAsync() {
            return base.Channel.getSizeAsync();
        }
        
        public void resaizeImage(int id, int width, int height) {
            base.Channel.resaizeImage(id, width, height);
        }
        
        public System.Threading.Tasks.Task resaizeImageAsync(int id, int width, int height) {
            return base.Channel.resaizeImageAsync(id, width, height);
        }
        
        public string getPath(string name) {
            return base.Channel.getPath(name);
        }
        
        public System.Threading.Tasks.Task<string> getPathAsync(string name) {
            return base.Channel.getPathAsync(name);
        }
        
        public void getName(string name) {
            base.Channel.getName(name);
        }
        
        public System.Threading.Tasks.Task getNameAsync(string name) {
            return base.Channel.getNameAsync(name);
        }
        
        public int getID() {
            return base.Channel.getID();
        }
        
        public System.Threading.Tasks.Task<int> getIDAsync() {
            return base.Channel.getIDAsync();
        }
        
        public void setNazwa(string name) {
            base.Channel.setNazwa(name);
        }
        
        public System.Threading.Tasks.Task setNazwaAsync(string name) {
            return base.Channel.setNazwaAsync(name);
        }
        
        public Contract.ImageData getImageData(int id) {
            return base.Channel.getImageData(id);
        }
        
        public System.Threading.Tasks.Task<Contract.ImageData> getImageDataAsync(int id) {
            return base.Channel.getImageDataAsync(id);
        }
    }
}
